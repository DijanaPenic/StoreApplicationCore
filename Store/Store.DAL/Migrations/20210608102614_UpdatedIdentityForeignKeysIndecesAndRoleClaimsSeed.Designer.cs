// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Store.DAL.Context;

namespace Store.DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210608102614_UpdatedIdentityForeignKeysIndecesAndRoleClaimsSeed")]
    partial class UpdatedIdentityForeignKeysIndecesAndRoleClaimsSeed
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("Store.Entities.BookEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("author");

                    b.Property<Guid>("BookstoreId")
                        .HasColumnType("uuid")
                        .HasColumnName("bookstore_id");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created_utc");

                    b.Property<DateTime>("DateUpdatedUtc")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_updated_utc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_books");

                    b.HasIndex("BookstoreId")
                        .HasDatabaseName("ix_books_bookstore_id");

                    b.ToTable("book");

                    b.HasData(
                        new
                        {
                            Id = new Guid("304e51fa-e2dc-4114-bf3f-08d86b04996d"),
                            Author = "J. R. R. Tolkien",
                            BookstoreId = new Guid("61c048ca-028d-4466-b7fd-4a05f0dad647"),
                            DateCreatedUtc = new DateTime(2020, 10, 8, 18, 44, 11, 0, DateTimeKind.Unspecified),
                            DateUpdatedUtc = new DateTime(2020, 10, 8, 18, 44, 11, 0, DateTimeKind.Unspecified),
                            Name = "The Lord of the Rings"
                        },
                        new
                        {
                            Id = new Guid("2d59e1d6-05e8-47a4-bf40-08d86b04996d"),
                            Author = "Paulo Coelho",
                            BookstoreId = new Guid("61c048ca-028d-4466-b7fd-4a05f0dad647"),
                            DateCreatedUtc = new DateTime(2020, 10, 8, 18, 44, 11, 0, DateTimeKind.Unspecified),
                            DateUpdatedUtc = new DateTime(2020, 10, 8, 18, 44, 11, 0, DateTimeKind.Unspecified),
                            Name = "The Alchemist"
                        },
                        new
                        {
                            Id = new Guid("53b9c986-1857-4878-bf41-08d86b04996d"),
                            Author = "Antoine de Saint-Exupéry",
                            BookstoreId = new Guid("61c048ca-028d-4466-b7fd-4a05f0dad647"),
                            DateCreatedUtc = new DateTime(2020, 10, 8, 18, 44, 11, 0, DateTimeKind.Unspecified),
                            DateUpdatedUtc = new DateTime(2020, 10, 8, 18, 44, 11, 0, DateTimeKind.Unspecified),
                            Name = "The Little Prince"
                        });
                });

            modelBuilder.Entity("Store.Entities.BookstoreEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created_utc");

                    b.Property<DateTime>("DateUpdatedUtc")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_updated_utc");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("location");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_bookstores");

                    b.ToTable("bookstore");

                    b.HasData(
                        new
                        {
                            Id = new Guid("61c048ca-028d-4466-b7fd-4a05f0dad647"),
                            DateCreatedUtc = new DateTime(2020, 10, 8, 18, 44, 11, 0, DateTimeKind.Unspecified),
                            DateUpdatedUtc = new DateTime(2020, 10, 8, 18, 44, 11, 0, DateTimeKind.Unspecified),
                            Location = "2526 E Colfax Ave, Denver, WA",
                            Name = "Strand Book Store"
                        },
                        new
                        {
                            Id = new Guid("a4b57c3c-4c09-4b8c-b2f8-e88ce049f30c"),
                            DateCreatedUtc = new DateTime(2020, 10, 8, 18, 44, 11, 0, DateTimeKind.Unspecified),
                            DateUpdatedUtc = new DateTime(2020, 10, 8, 18, 44, 11, 0, DateTimeKind.Unspecified),
                            Location = "18325 Campus Way NE, Bothell, WA",
                            Name = "Powell's City of Books"
                        },
                        new
                        {
                            Id = new Guid("fa588725-0c60-4554-8eb9-20520038ee87"),
                            DateCreatedUtc = new DateTime(2020, 10, 8, 18, 44, 11, 0, DateTimeKind.Unspecified),
                            DateUpdatedUtc = new DateTime(2020, 10, 8, 18, 44, 11, 0, DateTimeKind.Unspecified),
                            Location = "3415 SW Cedar Hills Blvd, Beaverton, OR",
                            Name = "Shakespeare & Co"
                        });
                });

            modelBuilder.Entity("Store.Entities.EmailTemplateEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid")
                        .HasColumnName("client_id");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created_utc");

                    b.Property<DateTime>("DateUpdatedUtc")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_updated_utc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)")
                        .HasColumnName("path");

                    b.Property<int>("Type")
                        .HasColumnType("integer")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_email_templates");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_email_template_client_id");

                    b.ToTable("email_template");
                });

            modelBuilder.Entity("Store.Entities.Identity.ClientEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("AccessTokenLifeTime")
                        .HasColumnType("integer")
                        .HasColumnName("access_token_life_time");

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<string>("AllowedOrigin")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("allowed_origin");

                    b.Property<int>("ApplicationType")
                        .HasColumnType("integer")
                        .HasColumnName("application_type");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created_utc");

                    b.Property<DateTime>("DateUpdatedUtc")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_updated_utc");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int>("RefreshTokenLifeTime")
                        .HasColumnType("integer")
                        .HasColumnName("refresh_token_life_time");

                    b.Property<string>("Secret")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("secret");

                    b.HasKey("Id")
                        .HasName("pk_clients");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("NameIndex");

                    b.ToTable("client", "identity");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5c52160a-4ab4-49c6-ba5f-56df9c5730b6"),
                            AccessTokenLifeTime = 20,
                            Active = true,
                            AllowedOrigin = "*",
                            ApplicationType = 1,
                            DateCreatedUtc = new DateTime(2020, 10, 25, 16, 44, 0, 0, DateTimeKind.Unspecified),
                            DateUpdatedUtc = new DateTime(2020, 10, 25, 16, 44, 0, 0, DateTimeKind.Unspecified),
                            Description = "Web API Application",
                            Name = "WebApiApplication",
                            RefreshTokenLifeTime = 60,
                            Secret = "PX23zsV/7nm6+ZI9LmrKXSBf2O47cYtiJGk2WJ/G/PdU2eD7Y929MZeItkGpBY2v6a2tXhGINq8bAQYz1bQC6A=="
                        });
                });

            modelBuilder.Entity("Store.Entities.Identity.RoleClaimEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created_utc");

                    b.Property<DateTime>("DateUpdatedUtc")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_updated_utc");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.HasKey("Id")
                        .HasName("pk_role_claims");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_role_claims_role_id");

                    b.ToTable("role_claim", "identity");

                    b.HasData(
                        new
                        {
                            Id = new Guid("31fc1523-8653-4bbc-acab-dee44688439a"),
                            ClaimType = "Permission",
                            ClaimValue = "Book.Read",
                            DateCreatedUtc = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdatedUtc = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = new Guid("d72ef5e5-f08a-4173-b83a-74618893891b")
                        },
                        new
                        {
                            Id = new Guid("d7cca48d-8c8c-4e58-9354-526b1bbcd801"),
                            ClaimType = "Permission",
                            ClaimValue = "Book.Update",
                            DateCreatedUtc = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdatedUtc = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = new Guid("d72ef5e5-f08a-4173-b83a-74618893891b")
                        },
                        new
                        {
                            Id = new Guid("75a033b5-074d-4a50-b2dd-d934dfc35018"),
                            ClaimType = "Permission",
                            ClaimValue = "Book.Create",
                            DateCreatedUtc = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdatedUtc = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = new Guid("d72ef5e5-f08a-4173-b83a-74618893891b")
                        },
                        new
                        {
                            Id = new Guid("71e14223-8ceb-4a37-8696-3dedc476fb8e"),
                            ClaimType = "Permission",
                            ClaimValue = "Book.Delete",
                            DateCreatedUtc = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdatedUtc = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = new Guid("d72ef5e5-f08a-4173-b83a-74618893891b")
                        },
                        new
                        {
                            Id = new Guid("2cc7acb8-0b62-4cd4-9139-b0ad220678e4"),
                            ClaimType = "Permission",
                            ClaimValue = "Book.Full",
                            DateCreatedUtc = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdatedUtc = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = new Guid("d72ef5e5-f08a-4173-b83a-74618893891b")
                        },
                        new
                        {
                            Id = new Guid("28fc2b87-eee6-4cbd-847b-91c0da1751a2"),
                            ClaimType = "Permission",
                            ClaimValue = "Bookstore.Read",
                            DateCreatedUtc = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdatedUtc = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = new Guid("d72ef5e5-f08a-4173-b83a-74618893891b")
                        },
                        new
                        {
                            Id = new Guid("3e7a5a9f-efd5-41c9-97bc-db0e438da4d5"),
                            ClaimType = "Permission",
                            ClaimValue = "Bookstore.Update",
                            DateCreatedUtc = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdatedUtc = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = new Guid("d72ef5e5-f08a-4173-b83a-74618893891b")
                        },
                        new
                        {
                            Id = new Guid("62589436-f138-4375-a4b0-fb19048efc6c"),
                            ClaimType = "Permission",
                            ClaimValue = "Bookstore.Create",
                            DateCreatedUtc = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdatedUtc = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = new Guid("d72ef5e5-f08a-4173-b83a-74618893891b")
                        },
                        new
                        {
                            Id = new Guid("c2810def-d14f-451c-8dde-cc9a0e2ad04c"),
                            ClaimType = "Permission",
                            ClaimValue = "Bookstore.Delete",
                            DateCreatedUtc = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdatedUtc = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = new Guid("d72ef5e5-f08a-4173-b83a-74618893891b")
                        },
                        new
                        {
                            Id = new Guid("9a72cefd-056b-4507-9130-06e680c6bbc7"),
                            ClaimType = "Permission",
                            ClaimValue = "Bookstore.Full",
                            DateCreatedUtc = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdatedUtc = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = new Guid("d72ef5e5-f08a-4173-b83a-74618893891b")
                        },
                        new
                        {
                            Id = new Guid("83cf48ff-6a60-4565-bf5c-6470870f7efd"),
                            ClaimType = "Permission",
                            ClaimValue = "User.Read",
                            DateCreatedUtc = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdatedUtc = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = new Guid("d72ef5e5-f08a-4173-b83a-74618893891b")
                        },
                        new
                        {
                            Id = new Guid("ec34092b-38fa-4df7-a2e4-d313d79f0a3d"),
                            ClaimType = "Permission",
                            ClaimValue = "User.Update",
                            DateCreatedUtc = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdatedUtc = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = new Guid("d72ef5e5-f08a-4173-b83a-74618893891b")
                        },
                        new
                        {
                            Id = new Guid("a6bf0136-feb7-480b-b518-64f65ed70fa5"),
                            ClaimType = "Permission",
                            ClaimValue = "User.Create",
                            DateCreatedUtc = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdatedUtc = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = new Guid("d72ef5e5-f08a-4173-b83a-74618893891b")
                        },
                        new
                        {
                            Id = new Guid("0fd82be4-fad9-44a6-bf1e-5369a5f7ce0d"),
                            ClaimType = "Permission",
                            ClaimValue = "User.Delete",
                            DateCreatedUtc = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdatedUtc = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = new Guid("d72ef5e5-f08a-4173-b83a-74618893891b")
                        },
                        new
                        {
                            Id = new Guid("b236e988-e237-4367-823b-55d53e9d591e"),
                            ClaimType = "Permission",
                            ClaimValue = "User.Full",
                            DateCreatedUtc = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdatedUtc = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = new Guid("d72ef5e5-f08a-4173-b83a-74618893891b")
                        },
                        new
                        {
                            Id = new Guid("ee04a7d9-ad9c-4f4a-9820-d55fa540c632"),
                            ClaimType = "Permission",
                            ClaimValue = "Role.Read",
                            DateCreatedUtc = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdatedUtc = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = new Guid("d72ef5e5-f08a-4173-b83a-74618893891b")
                        },
                        new
                        {
                            Id = new Guid("1d2674ad-f820-4222-897b-4e48bba43d3d"),
                            ClaimType = "Permission",
                            ClaimValue = "Role.Update",
                            DateCreatedUtc = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdatedUtc = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = new Guid("d72ef5e5-f08a-4173-b83a-74618893891b")
                        },
                        new
                        {
                            Id = new Guid("5bfb886c-da71-40ae-893e-aba0f5fca319"),
                            ClaimType = "Permission",
                            ClaimValue = "Role.Create",
                            DateCreatedUtc = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdatedUtc = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = new Guid("d72ef5e5-f08a-4173-b83a-74618893891b")
                        },
                        new
                        {
                            Id = new Guid("fd843c83-ddeb-4ca9-957f-333ee739402c"),
                            ClaimType = "Permission",
                            ClaimValue = "Role.Delete",
                            DateCreatedUtc = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdatedUtc = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = new Guid("d72ef5e5-f08a-4173-b83a-74618893891b")
                        },
                        new
                        {
                            Id = new Guid("171c4701-98e8-4b74-af5e-eda937dbdb24"),
                            ClaimType = "Permission",
                            ClaimValue = "Role.Full",
                            DateCreatedUtc = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdatedUtc = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = new Guid("d72ef5e5-f08a-4173-b83a-74618893891b")
                        },
                        new
                        {
                            Id = new Guid("c0aada02-252d-4231-ae31-4445736c39ea"),
                            ClaimType = "Permission",
                            ClaimValue = "EmailTemplate.Read",
                            DateCreatedUtc = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdatedUtc = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = new Guid("d72ef5e5-f08a-4173-b83a-74618893891b")
                        },
                        new
                        {
                            Id = new Guid("4cc53412-561a-4d29-ac1b-22dd3cf18c32"),
                            ClaimType = "Permission",
                            ClaimValue = "EmailTemplate.Update",
                            DateCreatedUtc = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdatedUtc = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = new Guid("d72ef5e5-f08a-4173-b83a-74618893891b")
                        },
                        new
                        {
                            Id = new Guid("b5695386-1b56-4e77-87ab-6b58c16f5594"),
                            ClaimType = "Permission",
                            ClaimValue = "EmailTemplate.Create",
                            DateCreatedUtc = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdatedUtc = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = new Guid("d72ef5e5-f08a-4173-b83a-74618893891b")
                        },
                        new
                        {
                            Id = new Guid("f6534a40-cb9a-43a9-b00f-01471fff8c73"),
                            ClaimType = "Permission",
                            ClaimValue = "EmailTemplate.Delete",
                            DateCreatedUtc = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdatedUtc = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = new Guid("d72ef5e5-f08a-4173-b83a-74618893891b")
                        },
                        new
                        {
                            Id = new Guid("ee777566-7a40-4aa1-9923-2758a38e777a"),
                            ClaimType = "Permission",
                            ClaimValue = "EmailTemplate.Full",
                            DateCreatedUtc = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdatedUtc = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = new Guid("d72ef5e5-f08a-4173-b83a-74618893891b")
                        },
                        new
                        {
                            Id = new Guid("3f3b40be-8f86-4e79-adf1-8ba429f73c89"),
                            ClaimType = "Permission",
                            ClaimValue = "Book.Read",
                            DateCreatedUtc = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdatedUtc = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = new Guid("d82ef5e5-f08a-4173-b83a-74618893891b")
                        },
                        new
                        {
                            Id = new Guid("399fc9fb-bd70-4bf9-8dd4-a45e25630d8a"),
                            ClaimType = "Permission",
                            ClaimValue = "Bookstore.Read",
                            DateCreatedUtc = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdatedUtc = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = new Guid("d82ef5e5-f08a-4173-b83a-74618893891b")
                        },
                        new
                        {
                            Id = new Guid("c8ad649a-2019-43e7-8a33-786d2963c4cc"),
                            ClaimType = "Permission",
                            ClaimValue = "Book.Read",
                            DateCreatedUtc = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdatedUtc = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = new Guid("d92ef5e5-f08a-4173-b83a-74618893891b")
                        },
                        new
                        {
                            Id = new Guid("6775734b-677b-4430-bbb9-1495d8991419"),
                            ClaimType = "Permission",
                            ClaimValue = "Book.Update",
                            DateCreatedUtc = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdatedUtc = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = new Guid("d92ef5e5-f08a-4173-b83a-74618893891b")
                        },
                        new
                        {
                            Id = new Guid("43f588d9-5a6c-48c3-900b-5a9d6a643637"),
                            ClaimType = "Permission",
                            ClaimValue = "Book.Create",
                            DateCreatedUtc = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdatedUtc = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = new Guid("d92ef5e5-f08a-4173-b83a-74618893891b")
                        },
                        new
                        {
                            Id = new Guid("b1e0cbc5-f04f-4a43-bab6-2448d144dbfc"),
                            ClaimType = "Permission",
                            ClaimValue = "Book.Delete",
                            DateCreatedUtc = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdatedUtc = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = new Guid("d92ef5e5-f08a-4173-b83a-74618893891b")
                        },
                        new
                        {
                            Id = new Guid("18a4fabe-2e70-4f51-a38a-30fa12332216"),
                            ClaimType = "Permission",
                            ClaimValue = "Bookstore.Read",
                            DateCreatedUtc = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdatedUtc = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = new Guid("d92ef5e5-f08a-4173-b83a-74618893891b")
                        },
                        new
                        {
                            Id = new Guid("f753b22d-bcaf-4545-b9b4-37d1bdedde67"),
                            ClaimType = "Permission",
                            ClaimValue = "Bookstore.Update",
                            DateCreatedUtc = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdatedUtc = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = new Guid("d92ef5e5-f08a-4173-b83a-74618893891b")
                        },
                        new
                        {
                            Id = new Guid("1633728a-d42a-4ee3-98af-74db1970224e"),
                            ClaimType = "Permission",
                            ClaimValue = "Bookstore.Create",
                            DateCreatedUtc = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdatedUtc = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = new Guid("d92ef5e5-f08a-4173-b83a-74618893891b")
                        },
                        new
                        {
                            Id = new Guid("edf7e607-426d-4cc5-b6ac-321f11518520"),
                            ClaimType = "Permission",
                            ClaimValue = "Bookstore.Delete",
                            DateCreatedUtc = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdatedUtc = new DateTime(2021, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            RoleId = new Guid("d92ef5e5-f08a-4173-b83a-74618893891b")
                        });
                });

            modelBuilder.Entity("Store.Entities.Identity.RoleEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created_utc");

                    b.Property<DateTime>("DateUpdatedUtc")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_updated_utc");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_name");

                    b.Property<bool>("Stackable")
                        .HasColumnType("boolean")
                        .HasColumnName("stackable");

                    b.HasKey("Id")
                        .HasName("pk_roles");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("role", "identity");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d72ef5e5-f08a-4173-b83a-74618893891b"),
                            DateCreatedUtc = new DateTime(2020, 10, 8, 18, 44, 11, 0, DateTimeKind.Unspecified),
                            DateUpdatedUtc = new DateTime(2020, 10, 8, 18, 44, 11, 0, DateTimeKind.Unspecified),
                            Name = "Admin",
                            NormalizedName = "ADMIN",
                            Stackable = false
                        },
                        new
                        {
                            Id = new Guid("d82ef5e5-f08a-4173-b83a-74618893891b"),
                            DateCreatedUtc = new DateTime(2020, 10, 8, 18, 44, 11, 0, DateTimeKind.Unspecified),
                            DateUpdatedUtc = new DateTime(2020, 10, 8, 18, 44, 11, 0, DateTimeKind.Unspecified),
                            Name = "Customer",
                            NormalizedName = "CUSTOMER",
                            Stackable = true
                        },
                        new
                        {
                            Id = new Guid("d92ef5e5-f08a-4173-b83a-74618893891b"),
                            DateCreatedUtc = new DateTime(2020, 10, 8, 18, 44, 11, 0, DateTimeKind.Unspecified),
                            DateUpdatedUtc = new DateTime(2020, 10, 8, 18, 44, 11, 0, DateTimeKind.Unspecified),
                            Name = "Store Manager",
                            NormalizedName = "STORE MANAGER",
                            Stackable = true
                        },
                        new
                        {
                            Id = new Guid("9621c09c-06b1-45fb-8baf-38e0757e2f59"),
                            DateCreatedUtc = new DateTime(2020, 10, 30, 18, 44, 11, 0, DateTimeKind.Unspecified),
                            DateUpdatedUtc = new DateTime(2020, 10, 30, 18, 44, 11, 0, DateTimeKind.Unspecified),
                            Name = "Guest",
                            NormalizedName = "GUEST",
                            Stackable = false
                        });
                });

            modelBuilder.Entity("Store.Entities.Identity.UserClaimEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("ClaimType")
                        .HasColumnType("text")
                        .HasColumnName("claim_type");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text")
                        .HasColumnName("claim_value");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created_utc");

                    b.Property<DateTime>("DateUpdatedUtc")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_updated_utc");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_claims");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_claims_user_id");

                    b.ToTable("user_claim", "identity");
                });

            modelBuilder.Entity("Store.Entities.Identity.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer")
                        .HasColumnName("access_failed_count");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text")
                        .HasColumnName("concurrency_stamp");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created_utc");

                    b.Property<DateTime>("DateUpdatedUtc")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_updated_utc");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("email");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("email_confirmed");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("first_name");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("boolean")
                        .HasColumnName("is_approved");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("last_name");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("lockout_enabled");

                    b.Property<DateTime?>("LockoutEndDateUtc")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("lockout_end_date_utc");

                    b.Property<string>("NormalizedEmail")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("normalized_user_name");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text")
                        .HasColumnName("phone_number");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("phone_number_confirmed");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text")
                        .HasColumnName("security_stamp");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("two_factor_enabled");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("user_name");

                    b.HasKey("Id")
                        .HasName("pk_users");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("user", "identity");
                });

            modelBuilder.Entity("Store.Entities.Identity.UserLoginEntity", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("login_provider");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("provider_key");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created_utc");

                    b.Property<DateTime>("DateUpdatedUtc")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_updated_utc");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_confirmed");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text")
                        .HasColumnName("provider_display_name");

                    b.Property<string>("Token")
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)")
                        .HasColumnName("token");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("pk_user_login");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_logins_user_id");

                    b.ToTable("user_login", "identity");
                });

            modelBuilder.Entity("Store.Entities.Identity.UserRefreshTokenEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid")
                        .HasColumnName("client_id");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created_utc");

                    b.Property<DateTime>("DateExpiresUtc")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_expires_utc");

                    b.Property<DateTime>("DateUpdatedUtc")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_updated_utc");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("value");

                    b.HasKey("Id")
                        .HasName("pk_user_refresh_tokens");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("ix_user_refresh_tokens_client_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_refresh_tokens_user_id");

                    b.ToTable("user_refresh_token", "identity");
                });

            modelBuilder.Entity("Store.Entities.Identity.UserTokenEntity", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("login_provider");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("name");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created_utc");

                    b.Property<DateTime>("DateUpdatedUtc")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_updated_utc");

                    b.Property<string>("Value")
                        .HasColumnType("text")
                        .HasColumnName("value");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("pk_user_token");

                    b.ToTable("user_token", "identity");
                });

            modelBuilder.Entity("user_role", b =>
                {
                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<DateTime>("DateCreatedUtc")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("date_created_utc");

                    b.HasKey("RoleId", "UserId")
                        .HasName("pk_user_role");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_role_user_id");

                    b.ToTable("user_role", "identity");
                });

            modelBuilder.Entity("Store.Entities.BookEntity", b =>
                {
                    b.HasOne("Store.Entities.BookstoreEntity", "Bookstore")
                        .WithMany("Books")
                        .HasForeignKey("BookstoreId")
                        .HasConstraintName("fk_books_bookstores_bookstore_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bookstore");
                });

            modelBuilder.Entity("Store.Entities.EmailTemplateEntity", b =>
                {
                    b.HasOne("Store.Entities.Identity.ClientEntity", null)
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .HasConstraintName("fk_email_template_client_client_entity_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Store.Entities.Identity.RoleClaimEntity", b =>
                {
                    b.HasOne("Store.Entities.Identity.RoleEntity", "Role")
                        .WithMany("Claims")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_role_claims_roles_role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Store.Entities.Identity.UserClaimEntity", b =>
                {
                    b.HasOne("Store.Entities.Identity.UserEntity", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_claims_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Store.Entities.Identity.UserLoginEntity", b =>
                {
                    b.HasOne("Store.Entities.Identity.UserEntity", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_logins_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Store.Entities.Identity.UserRefreshTokenEntity", b =>
                {
                    b.HasOne("Store.Entities.Identity.ClientEntity", "Client")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("fk_user_refresh_tokens_clients_client_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Store.Entities.Identity.UserEntity", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_refresh_tokens_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Store.Entities.Identity.UserTokenEntity", b =>
                {
                    b.HasOne("Store.Entities.Identity.UserEntity", "User")
                        .WithMany("UserTokens")
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_tokens_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("user_role", b =>
                {
                    b.HasOne("Store.Entities.Identity.RoleEntity", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .HasConstraintName("fk_user_role_roles_role_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Store.Entities.Identity.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("fk_user_role_users_user_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Store.Entities.BookstoreEntity", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("Store.Entities.Identity.ClientEntity", b =>
                {
                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("Store.Entities.Identity.RoleEntity", b =>
                {
                    b.Navigation("Claims");
                });

            modelBuilder.Entity("Store.Entities.Identity.UserEntity", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Logins");

                    b.Navigation("RefreshTokens");

                    b.Navigation("UserTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
