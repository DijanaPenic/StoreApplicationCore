variables:
  dockerComposeFileExpression: '**/docker-compose.yml'
  defaultDockerComposeFile: 'docker-compose.yml'
  testDockerComposeFile: 'docker-compose.test.yml'
  sshEndpoint: 'store-test-westeu-ssh'
  vmProjectPath: '/home/azureuser/Projects/StoreApplicationCore'
  vmDockerFolderPath: '$(vmProjectPath)/Store/Docker'
  sourceCodeArtifactPath: '$(Pipeline.Workspace)/source-code'
  logsPath: 'logs'

pool:
  vmImage: 'ubuntu-latest'

stages:
  - stage: Prepare_application_code
    jobs: 
    - job: Prepare_application_code
      displayName: Preparing application code
      steps:
      - task: DownloadSecureFile@1
        displayName: 'Download environment variables file - postgres server'
        inputs:
          secureFile: postgres-server_variables.env
          retryCount: 3
      - task: DownloadSecureFile@1
        displayName: 'Download environment variables file - pgadmin'
        inputs:
          secureFile: pgadmin_variables.env
          retryCount: 3
      - task: CopyFiles@2
        displayName: 'Copy environment variable files into the Docker folder'
        inputs:
          SourceFolder: '$(Agent.TempDirectory)'
          Contents: '*.env'
          TargetFolder: '$(System.DefaultWorkingDirectory)/Store/Docker'
      - task: PublishPipelineArtifact@1
        displayName: Publish pipeline artifact
        inputs:
          targetPath: '$(System.DefaultWorkingDirectory)'
          artifact: 'source-code'
          publishLocation: 'pipeline'
  - stage: 'Deploy'
    jobs:
    - deployment: Deploy_to_test_environment
      displayName: Deploying to test environment 
      environment: 'StoreTestEnvironment'
      strategy:
        runOnce:
          deploy:
            steps:
            - task: CopyFilesOverSSH@0
              displayName: Copy store source code over SSH
              inputs:
                sshEndpoint: $(sshEndpoint)
                sourceFolder: $(sourceCodeArtifactPath)
                contents: '**'
                targetFolder: $(vmProjectPath)
                overwrite: true
            - task: SSH@0
              displayName: Run docker compose
              inputs:
                sshEndpoint: $(sshEndpoint)
                runOptions: 'inline'
                failOnStdErr: true
                inline: |
                  cd $(vmDockerFolderPath)
                  
                  mkdir -p logs

                  echo "docker-compose down --remove-orphans"
                  docker-compose down --remove-orphans > $(logsPath)/docker-compose-down.txt 2>&1
                  cat $(logsPath)/docker-compose-down.txt

                  echo "docker-compose -f $(defaultDockerComposeFile) -f $(testDockerComposeFile) build"
                  docker-compose -f $(defaultDockerComposeFile) -f $(testDockerComposeFile) build > $(logsPath)/docker-compose-build.txt 2>&1
                  cat $(logsPath)/docker-compose-build.txt

                  echo "docker-compose -f $(defaultDockerComposeFile) -f $(testDockerComposeFile) up --detach"
                  docker-compose -f $(defaultDockerComposeFile) -f $(testDockerComposeFile) up --detach > $(logsPath)/docker-compose-up.txt 2>&1

                  echo "sleep 4m"
                  sleep 4m

                  docker-compose logs

            - task: SSH@0
              displayName: Perform container healthcheck
              inputs:
                sshEndpoint: $(sshEndpoint)
                runOptions: 'script'
                failOnStdErr: true
                scriptPath: '$(sourceCodeArtifactPath)/check-deploy-status.ps1'
                args: 
                  -DockerFolderPath $(vmDockerFolderPath)
                  -LogsPath $(logsPath)

# home/vsts/work/_temp -> Agent.TempDirectory
# home/vsts/work/1 -> Pipeline.Workspace
# home/vsts/work/1/s -> System.DefaultWorkingDirectory