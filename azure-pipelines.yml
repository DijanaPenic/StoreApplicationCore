variables:
  project: '**/Store.sln'

trigger:
  branches:
    include:
      - master

pool:
  vmImage: 'ubuntu-latest'

stages:
  - stage: Build_and_publish_application_code
    jobs: 
    - job: build_and_publish_application_code
      displayName: Building/Publishing application code
      steps:
      - task: DownloadSecureFile@1
        displayName: 'Download environment variables file - postgres server'
        inputs:
          secureFile: postgres-server_variables.env
          retryCount: 3
      - task: DownloadSecureFile@1
        displayName: 'Download environment variables file - pgadmin'
        inputs:
          secureFile: pgadmin_variables.env
          retryCount: 3
      - task: CopyFiles@2
        displayName: 'Copy environment variable files into the Docker folder'
        inputs:
          SourceFolder: '$(Agent.TempDirectory)'
          Contents: '*.env'
          TargetFolder: '$(System.DefaultWorkingDirectory)/Store/Docker'
      - task: UseDotNet@2
        displayName: 'Use .NET Core SDK 5.x'
        inputs:
          packageType: sdk
          version: 5.x
          installationPath: $(Agent.ToolsDirectory)/dotnet
      - task: DotNetCoreCLI@2
        displayName: Restore nuget packages
        inputs:
          command: restore
          feedsToUse: 'select'
          projects: $(project)
          workingDirectory: '$(System.DefaultWorkingDirectory)'
      - task: DotNetCoreCLI@2
        displayName: Build application
        inputs:
          command: build
          projects: $(project)
          arguments: '-c Debug'
          workingDirectory: '$(System.DefaultWorkingDirectory)'
      - task: DotNetCoreCLI@2
        displayName: Publish application
        inputs:
          command: publish
          nobuild: true
          projects: $(project)
          arguments: '-o $(Build.ArtifactStagingDirectory)/Output'
          zipAfterPublish: true
          modifyOutputPath: true
          workingDirectory: '$(System.DefaultWorkingDirectory)'
      - task: ArchiveFiles@2
        displayName: 'Prepare Docker'
        inputs:
          rootFolderOrFile: '$(System.DefaultWorkingDirectory)/Store/Docker' 
          includeRootFolder: false 
          archiveType: 'zip'
          archiveFile: '$(Build.ArtifactStagingDirectory)/Output/Docker.zip' 
          replaceExistingArchive: true
      - task: CopyFiles@2
        displayName: 'Prepare publish scripts'
        inputs:
          contents: '$(System.DefaultWorkingDirectory)/PublishScripts/**'
          targetFolder: '$(Build.ArtifactStagingDirectory)/Output/'
      - task: PublishPipelineArtifact@1
        displayName: Publish pipeline artifact
        inputs:
          targetPath: '$(Build.ArtifactStagingDirectory)/Output'
          artifact: 'publish-output'
          publishLocation: 'pipeline' 

# home/vsts/work/_temp -> Agent.TempDirectory
# home/vsts/work/1 -> Pipeline.Workspace
# home/vsts/work/1/s -> System.DefaultWorkingDirectory