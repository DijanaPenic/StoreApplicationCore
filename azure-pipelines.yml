# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

variables:
  azureSubscription: 'Visual Studio Enterprise Subscription â€“ MPN(45a48931-c96a-4b38-80cf-be5fff673f85)'
  azureContainerRegistry: '{"loginServer":"storetestwesteu.azurecr.io", "id" : "/subscriptions/45a48931-c96a-4b38-80cf-be5fff673f85/resourceGroups/ContainerRegistry-West-EU/providers/Microsoft.ContainerRegistry/registries/storetestwesteu"}'
  dockerComposeFile: '**/docker-compose.yml'
  additionalDockerComposeFiles: 'docker-compose.test.yml'
  sshEndpoint: 'SSH-END-POINT-NAME-FROM-SERVICE-CONNECTIONS'
  dockerPath: '$(System.DefaultWorkingDirectory)/Store/Docker/'

stages:
  - stage: Build_and_push_docker_containers
    jobs:
    - job: Build
      pool:
        vmImage: 'ubuntu-latest'
      continueOnError: true
      steps:
      - task: DownloadSecureFile@1
        displayName: 'Download environment variables file - postgres server'
        inputs:
          secureFile: postgres-server_variables.env
          retryCount: 3
      - task: DownloadSecureFile@1
        displayName: 'Download environment variables file - pgadmin'
        inputs:
          secureFile: pgadmin_variables.env
          retryCount: 3
      - task: CopyFiles@2
        displayName: 'Copy environment variable files to: $(dockerPath)'
        inputs:
          SourceFolder: '$(Agent.TempDirectory)'
          Contents: '*.env'
          TargetFolder: $(dockerPath) 
      - task: DockerCompose@0
        displayName: Build services     
        inputs:
          containerregistrytype: 'Azure Container Registry'
          azureSubscription: $(azureSubscription)
          azureContainerRegistry: $(azureContainerRegistry)  
          dockerComposeFile: $(dockerComposeFile)
          additionalDockerComposeFiles: $(additionalDockerComposeFiles)
          projectName: $(Build.Repository.Name)
          action: 'Build services'
      - task: DockerCompose@0
        displayName: Push services
        inputs:
          action: 'Push services'
          containerregistrytype: 'Azure Container Registry'
          azureSubscription: $(azureSubscription)
          azureContainerRegistry: $(azureContainerRegistry)
          dockerComposeFile: $(dockerComposeFile)
          additionalDockerComposeFiles: $(additionalDockerComposeFiles)
          projectName: $(Build.Repository.Name)        
      - task: PublishPipelineArtifact@1
        inputs:
          targetPath: '$(Pipeline.Workspace)'
          artifact: 'docker-compose'
          publishLocation: 'pipeline'       
  
  # - stage: 'Deploy_to_test'
  #   jobs:
  #   - deployment: Test
  #     pool:
  #       vmImage: 'ubuntu-latest'
  #     environment: 'StoreTestEnvironment'
  #     strategy:
  #       runOnce:
  #         deploy:
  #           steps:
  #           - task: CopyFilesOverSSH@0
  #             inputs:
  #               sshEndpoint: $(sshEndpoint)
  #               sourceFolder: '$(Pipeline.Workspace)/docker-compose/s/'
  #               contents: |
  #                 docker-compose.yaml
  #                 .env
  #               targetFolder: 'TARGET-PATH'
  #           - task: SSH@0
  #             inputs:
  #               sshEndpoint: $(sshEndpoint)
  #               runOptions: 'inline'
  #               inline: |
  #                 sed -i 's/##BUILD##/$(Build.BuildId)/g' docker-compose.yaml
  #           - task: SSH@0
  #             inputs:
  #               sshEndpoint: $(sshEndpoint)
  #               runOptions: 'inline'
  #               inline: |
  #                 docker-compose up -d 2> docker-compose.log
  #                 cat docker-compose.log