# Docker
# Build and push an image to Azure Container Registry
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

variables:
  #azureSubscription: 'Visual Studio Enterprise Subscription â€“ MPN(45a48931-c96a-4b38-80cf-be5fff673f85)'
  #azureContainerRegistry: '{"loginServer":"storetestwesteu.azurecr.io", "id" : "/subscriptions/45a48931-c96a-4b38-80cf-be5fff673f85/resourceGroups/ContainerRegistry-West-EU/providers/Microsoft.ContainerRegistry/registries/storetestwesteu"}'
  dockerComposeFileExpression: '**/docker-compose.yml'
  defaultDockerComposeFile: 'docker-compose.yml'
  testDockerComposeFile: 'docker-compose.test.yml'
  sshEndpoint: 'store-test-westeu-ssh'
  dockerPath: '$(System.DefaultWorkingDirectory)/Store/Docker/'
  #projectName: 'StoreApplication'
  vmProjectPath: '/home/azureuser/Projects/StoreApplicationCore/'

pool:
  vmImage: 'ubuntu-latest'

stages:
  - stage: Prepare_application_code
           #Build_and_push_docker_containers
    jobs:
    - job:
      continueOnError: true
      steps:
      - task: DownloadSecureFile@1
        displayName: 'Download environment variables file - postgres server'
        inputs:
          secureFile: postgres-server_variables.env
          retryCount: 3
      - task: DownloadSecureFile@1
        displayName: 'Download environment variables file - pgadmin'
        inputs:
          secureFile: pgadmin_variables.env
          retryCount: 3
      - task: CopyFiles@2
        displayName: 'Copy environment variable files to: $(dockerPath)'
        inputs:
          SourceFolder: '$(Agent.TempDirectory)'
          Contents: '*.env'
          TargetFolder: $(dockerPath) 
      # - task: DockerCompose@0
      #   displayName: Build services
      #   inputs:
      #     containerregistrytype: 'Azure Container Registry'
      #     azureSubscription: $(azureSubscription)
      #     azureContainerRegistry: $(azureContainerRegistry)
      #     dockerComposeFile: $(dockerComposeFileExpression)
      #     additionalDockerComposeFiles: $(testDockerComposeFile)
      #     projectName: $(projectName)
      #     action: 'Build services'
      # - task: DockerCompose@0
      #   displayName: Push services
      #   inputs:
      #     action: 'Push services'
      #     containerregistrytype: 'Azure Container Registry'
      #     azureSubscription: $(azureSubscription)
      #     azureContainerRegistry: $(azureContainerRegistry)
      #     dockerComposeFile: $(dockerComposeFileExpression)
      #     additionalDockerComposeFiles: $(testDockerComposeFile)
      #     projectName: $(projectName)
      - task: PublishPipelineArtifact@1
        displayName: Publish pipeline artifact
        inputs:
          targetPath: '$(Pipeline.Workspace)'
          artifact: 'source-code'
          publishLocation: 'pipeline'
  
  - stage: 'Deploy_to_test'
    jobs:
    - deployment: Test
      environment: 'StoreTestEnvironment'
      strategy:
        runOnce:
          deploy:
            steps:
            # - task: InstallSSHKey@0
            #   displayName: 'Install an SSH key'
            #   inputs:
            #     knownHostsEntry: 'store-test-westeu'
            #     sshPublicKey: '$(myPubKey)'
            #     sshKeySecureFile: 'store-test-westeu-vm_key.pem'
            - task: CopyFilesOverSSH@0
              displayName: Copy store application repo over SSH
              inputs:
                sshEndpoint: $(sshEndpoint)
                sourceFolder: '$(Pipeline.Workspace)/source-code/s/'
                contents: '**'
                targetFolder: $(vmProjectPath)
                overwrite: true
            - task: SSH@0
              displayName: Run docker compose
              inputs:
                sshEndpoint: $(sshEndpoint)
                runOptions: 'inline'
                inline: |
                  cd $(vmProjectPath)/Store/Docker/
                  docker-compose down
                  docker-compose -f $(defaultDockerComposeFile) -f $(testDockerComposeFile) build
                  docker-compose -f $(defaultDockerComposeFile) -f $(testDockerComposeFile) up --force-recreate